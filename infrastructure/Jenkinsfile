pipeline {
    agent any
    
    tools {
        jdk 'jdk21' // This name must match the JDK installation name used in Jenkins Global Tool Configuration
    }
    
    environment {
        DOCKER_PASSWORD = credentials("docker_password")
        GITHUB_TOKEN = credentials("github_token")
        // Use the username from the Docker credentials instead of hardcoding it
        DOCKER_USERNAME = "${DOCKER_PASSWORD_USR}"
    }
    
    stages {
        stage('Build & Test') {
            steps {
                // Run unit tests and integration tests in one command
                sh './gradlew clean build testIT'
            }
        }
        
        stage('Tag Image') {
            steps {
                script {
                    sh(script: 'git fetch --tags', returnStdout: true).trim()
                    
                    // Check if any tags exist
                    def tagsExist = sh(script: 'git tag | wc -l', returnStdout: true).trim().toInteger() > 0
                    
                    if (tagsExist) {
                        env.MAJOR_VERSION = sh(script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 1', returnStdout: true).trim()
                        env.MINOR_VERSION = sh(script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 2', returnStdout: true).trim()
                        env.PATCH_VERSION = sh(script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 3', returnStdout: true).trim()
                        env.IMAGE_TAG = "${env.MAJOR_VERSION}.$((${env.MINOR_VERSION} + 1)).${env.PATCH_VERSION}"
                    } else {
                        env.IMAGE_TAG = "1.0.0" // Default tag if no git tags exist
                    }
                    
                    echo "Building Docker image with tag: ${env.IMAGE_TAG}"
                }
                sh "docker build -t ${DOCKER_USERNAME}/hello-img:${env.IMAGE_TAG} ."
            }
        }
        
        stage('Publish to DockerHub') {
            steps {
                script {
                    // Login to DockerHub using the username and password from credentials
                    sh "echo ${DOCKER_PASSWORD_PSW} | docker login -u ${DOCKER_PASSWORD_USR} --password-stdin"
                    
                    // Push the tagged image
                    sh "docker push ${DOCKER_USERNAME}/hello-img:${env.IMAGE_TAG}"
                    
                    // Also tag and push as 'latest'
                    sh "docker tag ${DOCKER_USERNAME}/hello-img:${env.IMAGE_TAG} ${DOCKER_USERNAME}/hello-img:latest"
                    sh "docker push ${DOCKER_USERNAME}/hello-img:latest"
                    
                    // Tag the Git repository with the same version
                    sh "git tag ${env.IMAGE_TAG}"
                    sh "git push https://${GITHUB_TOKEN_PSW}@github.com/${DOCKER_PASSWORD_USR}/service.git ${env.IMAGE_TAG}"
                    
                    // Logout from DockerHub
                    sh "docker logout"
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                script {
                    // Start the application and database containers
                    sh "IMAGE_TAG=${env.IMAGE_TAG} docker compose up -d hello mongo"
                    
                    // Wait for services to be fully ready
                    sh "sleep 20"
                    
                    // Verify deployment
                    echo "Application deployed with image tag: ${env.IMAGE_TAG}"
                }
            }
        }
        
        // Removed separate integration test stage as we're now running them in the Build & Test stage
    }
    
    post {
        always {
            // Clean up Docker images to avoid filling up disk space
            sh "docker system prune -f"
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Please check the logs for details."
        }
    }
}