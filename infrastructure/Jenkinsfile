pipeline {
    agent any
    
    tools {
        jdk 'jdk21' // This name must match the JDK installation name used in Jenkins Global Tool Configuration
    }
    
    environment {
        DOCKER_PASSWORD = credentials("docker_password")
        GITHUB_TOKEN = credentials("github_token")
    }
    
    stages {
        stage('Build & Test') {
            steps {
                sh './gradlew clean build'
            }
        }
        
        stage('Tag Image') {
            steps {
                script {
                    sh([script: 'git fetch --tag', returnStdout: true]).trim()
                    env.MAJOR_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 1', returnStdout: true]).trim()
                    env.MINOR_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 2', returnStdout: true]).trim()
                    env.PATCH_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 3', returnStdout: true]).trim()
                    env.IMAGE_TAG = "${env.MAJOR_VERSION}.\$((${env.MINOR_VERSION} + 1)).${env.PATCH_VERSION}"
                    
                    echo "Building Docker image with tag: ${env.IMAGE_TAG}"
                }
                sh "docker build -t alphaphantom26/hello-img:${env.IMAGE_TAG} ."
            }
        }
        
        stage('Publish to DockerHub') {
            steps {
                script {
                    // Login to DockerHub
                    sh "echo ${DOCKER_PASSWORD_PSW} | docker login -u ${DOCKER_PASSWORD_USR} --password-stdin"
                    
                    // Push the tagged image
                    sh "docker push alphaphantom26/hello-img:${env.IMAGE_TAG}"
                    
                    // Also tag and push as 'latest'
                    sh "docker tag alphaphantom26/hello-img:${env.IMAGE_TAG} alphaphantom26/hello-img:latest"
                    sh "docker push alphaphantom26/hello-img:latest"
                    
                    // Add git tag and push to repository
                    sh "git tag ${env.IMAGE_TAG}"
                    sh "git push https://${GITHUB_TOKEN_PSW}@github.com/${DOCKER_PASSWORD_USR}/service.git ${env.IMAGE_TAG}"
                    
                    // Logout from DockerHub
                    sh "docker logout"
                }
            }
        }
        
        stage('Run Application') {
            steps {
                sh "IMAGE_TAG=${env.IMAGE_TAG} docker compose up -d hello mongo"
            }
        }
        
        stage('Run Integration Tests') {
            steps {
                sh "./gradlew testIT"
            }
        }
    }
    
    post {
        always {
            // Clean up Docker images to avoid filling up disk space
            sh "docker system prune -f"
        }
    }
}